# -*- coding: utf-8 -*-
"""Tutorial-01_Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_KIiXu--RcxrbX-8jZLO8etW0AC7TVCf

The Cars93 dataset contains data from 93 cars that were on sale in the USA in 1993. The dataset has 93 rows listing various car models along with their features and specifications. The columns of this dataset---there are 27 of them---comprise various attributes, e.g., Manufacturer, Type, Price, mileage, horsepower etc.

## Reading csv file and storing it in pandas dataframe
"""

import pandas as pd

# Getting started with pandas: https://pandas.pydata.org/docs/getting_started/index.html
# API reference: https://pandas.pydata.org/docs/reference/index.html
# Reading the data from a csv file and storing it in a panda dataframe
df = pd.read_csv("Cars93.csv")
df

df.head() # prints top 5

df.tail(6)

"""## Implicit and Explicit index"""

print(df.loc[1]['Model']) #explicit index
print(df.iloc[1]['Model']) #implicit index

"""We see no difference because the explicit index is the same as implicit index (0-based indexing)"""

# df = df.set_index("Serial No.")
print(df.loc[1]['Model']) #explicit index # '2' can also be used instead of explicit 'Model'
print(df.iloc[1]['Model']) #implicit index

"""Now the explicit indexing has become 1-based, hence the difference in output.
Note: Implicit index always remains 0-based

## Basic operations
"""

# accessing using column names
df['Manufacturer']

df['Diff. in Price'] = df['Max.Price'] - df['Min.Price'] #adding new column
df

# changing values
print(df['Model'][1]) #explicit index used here
df['Model'][1] = 'Legend'
print(df['Model'][1]) #explicit index used here

"""# Cleaning Data

## Empty Values
NaN Values
"""

df['Luggage.room']

"""NaN values are missing values, not a number

If the dataset is big enough removing a few rows will not have a big impact on the result.
"""

new_df = df.dropna()
new_df['Luggage.room']

"""The length is reduced from 93 to 82. Another way to deal with missing values is to replace the the NaN values with different values."""

new_df['Luggage.room'] = df["Luggage.room"].fillna(df["Luggage.room"].mean()) # here the NaN Values are replaced by mean.
new_df['Luggage.room']

"""# Removing Duplicates"""

df.drop_duplicates(inplace = True) #drops all duplicate rows
df

"""# Sorting, grouping and printing

List all the manufacturers mentioned in the Cars93 data set in alphabetical order.
"""

df['Manufacturer'].sort_values().unique() # default is ascending order

"""Print all details of the costliest car of each of the ‘Types’"""

for i in df['Type'].unique():
    x = df.groupby('Type').get_group(i)  #groupby is used to categorise
    print(x[x['Price']==x['Price'].max()])

"""Write a function that asks you to enter the name of a manufacturer and print all the
models produced by that manufacturer. Print an appropriate error message if the
input is invalid.
"""

def all_models(Manufacturer):
    if df['Manufacturer'][df['Manufacturer']==Manufacturer].count()==0:
        print('No Manufacturer found with this name.')
    else:
        print(df[df['Manufacturer']==Manufacturer])

all_models('Lincoln')

"""Print the total count of cars per manufacturer."""

df.groupby('Manufacturer').size().reset_index(name='count')

"""List all the non-USA “Small” (‘Type’) cars (‘Make’) in alphabetical order."""

df[(df['Origin']=='non-USA') & (df['Type']=='Small')]['Make'].sort_values()

"""Group the cars by ‘Manufacturer’ and find the average price for each of the manufacturers by averaging the ‘Price’ of all the models produced by a particular manufacturer and then print all the ‘Manufacturers’ sorted (in ascending order) by average price"""

df.groupby('Manufacturer')['Price'].mean().sort_values()

"""Find the car models that are “Midsize” (‘Type’) and cost less than the average cost of all the cars (of all the types)."""

df[(df['Type']=='Midsize') & (df['Price']<df['Price'].mean())]['Model']

"""Find the car models that have MPG.city and MPG.highway higher than the average of MPG.city and average of MPG.highway, respectively. Here, average should be calculated over all the cars."""

df[(df['MPG.city']>df['MPG.city'].mean())&(df['MPG.highway']>df['MPG.highway'].mean())]['Model']

"""# Data derivation, computation and comparison

Calculate the ratio of Max.Price and Min.Price for each of the car models and add a new column called ‘Max_min_ratio’ to the imported dataframe.

1.   Print the cars for whom the ratio is equal to one.
2.   Find the manufacturer whom the gap between largest and smallest
max_min_ratio value is highest. Also, print the corresponding ratio values.
3. Print the car models (manufacturer and model) for whom the max_min_ratio is within ±1% of the mean of Max_min_ratio.
"""

df["Max_min_ratio"] = df["Max.Price"]/df["Min.Price"]
df.head()

df[df["Max_min_ratio"] == 1]["Manufacturer"].values

grouped = df.groupby("Manufacturer").Max_min_ratio.agg(lambda x: x.max() - x.min())
new_df = grouped.reset_index() # Convert Series to Dataframe
solution = new_df["Manufacturer"].iloc[new_df["Max_min_ratio"].idxmax()]
print("Manufacturer with highest gap between largest and smallest max_min_ratio value is: ", solution)

bool_series = df["Max_min_ratio"].between(0.99*df["Max_min_ratio"].mean(), 1.01*df["Max_min_ratio"].mean())
df[bool_series]["Model"].values

"""Calculate the average MPG ( ( MPG.city + MPG.highway)/2) for each of the carnmodels and add a new column called ‘AverageMPG’ to the updated dataframe.
1.   List the top 5 cars based on ‘AverageMPG’.
2.   Sort the “Midsize” cars by ‘AverageMPG’.
3.   Print all the non-USA cars (manufacturer and model) in alphabetical order whose ‘AverageMPG’ is higher than the average of the ‘AverageMPG’ column.
"""

df["AverageMPG"] = (df["MPG.city"]+df["MPG.highway"])/2
df.head()

df.sort_values(by=['AverageMPG'], ascending=False)["Make"].head(5)

df.loc[df["Type"] == "Midsize"].sort_values('AverageMPG')

df[(df['Origin']=='non-USA') & (df['AverageMPG'] > df['AverageMPG'].mean())][['Model','Manufacturer']]

"""Create a new identifier for the cars listed in the dataset by concatenating the first three alphabets of ‘Manufacturer’ with the first three alphabets of ‘Model’ followed by the horsepower. Use hyphens to indicate the concatenation. For example, the identifier for the first row is “Acu-Int-140”. Add a new column called ‘Identifier’ to the updated dataframe and generate
identifiers for each of the car models.
"""

df["Identifier"] = df.Manufacturer.str[:3] + '-' + df.Model.str[:3] + '-' + df.Horsepower.astype(str)
df.head()

"""Compare the average prices (average price is calculated after grouping them based on the ‘Type’) of different types (“Small”, “Midsize” etc.) of non-USA cars with that of the USA. Which one is cheaper in each category?"""

df.groupby(['Type','Origin'])['Price'].mean()