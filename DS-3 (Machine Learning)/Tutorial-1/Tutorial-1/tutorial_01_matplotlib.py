# -*- coding: utf-8 -*-
"""Tutorial-01_MatPlotLib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1duVVEciIAPuA80Tn7DXyIJzekKTx_erk

# *Matplotlib Library*

Matplotlib is a popular Python library used for creating various types of data visualizations, ranging from simple plots to complex charts and graphs.

(1) Matplotlib is a low level graph plotting library in python that serves as a visualization utility.

(2) It helps programmers and data analysts display data in a visually informative way, aiding in the interpretation and communication of insights.

# Installation of Matplotlib

(1) Using pip -> pip install matplotlib

(2) Using conda prompt -> conda install matplolib

# Import Matplotlib and Checking version
"""

import matplotlib
print(matplotlib.__version__)

"""#Pyplot

Most of the Matplotlib utilities lies under the pyplot submodule, and are usually imported under the plt alias
"""

import matplotlib.pyplot as plt

"""## Plotting x and y points
The plot() function is used to draw points (markers) in a diagram.
By default, the plot() function draws a line from point to point.

The function takes parameters for specifying points in the diagram.

Parameter 1 is an array containing the points on the x-axis.

Parameter 2 is an array containing the points on the y-axis.
"""

# Draw a line in a diagram from position (1, 3) to position (8, 10)

import matplotlib.pyplot as plt
import numpy as np

xpoints = np.array([1, 8])
ypoints = np.array([3, 10])

plt.plot(xpoints, ypoints)
plt.show()

# Draw two points in the diagram, one at position (1, 3) and one in position (8, 10)

import matplotlib.pyplot as plt
import numpy as np

xpoints = np.array([1, 8])
ypoints = np.array([3, 10])

plt.plot(xpoints, ypoints, 'o')
plt.show()

"""## Default X-Points
If we do not specify the points on the x-axis, they will get the default values 0, 1, 2, 3 etc., depending on the length of the y-points.

So, if we take the same example as above, and leave out the x-points, the diagram will look like this:
"""

import matplotlib.pyplot as plt
import numpy as np

ypoints = np.array([3, 8, 1, 10])

plt.plot(ypoints, marker = 'o')
plt.show()


import matplotlib.pyplot as plt
import numpy as np

ypoints = np.array([3, 8, 1, 10])

plt.plot(ypoints, linestyle = 'dotted')
plt.show()

"""## Create Labels & Title for a Plot
With Pyplot, you can use the xlabel() and ylabel() functions to set a label for the x- and y-axis.

With Pyplot, you can use the title() function to set a title for the plot.
### Note:-
You can use the loc parameter in title() to position the title
"""

import numpy as np
import matplotlib.pyplot as plt

x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])

plt.title("Distance Time Graph", loc = 'left')
plt.xlabel("Time (min)")
plt.ylabel("Distance (km)")

plt.plot(x, y)
plt.show()

"""## Add Grid Lines to a Plot
With Pyplot, you can use the grid() function to add grid lines to the plot
"""

import numpy as np
import matplotlib.pyplot as plt

x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])

plt.title("Distance Time Graph")
plt.xlabel("Time (min)")
plt.ylabel("Distance (km)")

plt.plot(x, y)

plt.grid(color = 'green', linestyle = '--', linewidth = 0.5)

plt.show()

"""## Matplotlib Subplot

## Display Multiple Plots
With the subplot() function you can draw multiple plots in one figure

The subplot() function takes three arguments that describes the layout of the figure.

The layout is organized in rows and columns, which are represented by the first and second argument.

The third argument represents the index of the current plot.
"""

import matplotlib.pyplot as plt
import numpy as np

#plot 1:
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])

plt.subplot(1, 2, 1)
plt.plot(x,y)
plt.title("SALES")

#plot 2:
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])

plt.subplot(1, 2, 2)
plt.plot(x,y)
plt.title("INCOME")

plt.suptitle("MY SHOP")
plt.show()

"""#Matplotlib Scatter

##Creating Scatter Plots
With Pyplot, you can use the scatter() function to draw a scatter plot.

The scatter() function plots one dot for each observation. It needs two arrays of the same length, one for the values of the x-axis, and one for values on the y-axis:
"""

import matplotlib.pyplot as plt
import numpy as np

x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])

plt.scatter(x, y)
plt.show()

# Draw two plots on the same figure

import matplotlib.pyplot as plt
import numpy as np

x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
plt.scatter(x, y, color = 'hotpink')

x = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])
y = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])
plt.scatter(x, y, color = '#88c999')

plt.show()

# Set your own color of the markers

import matplotlib.pyplot as plt
import numpy as np

x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
colors = np.array(["red","green","blue","yellow","pink","black","orange","purple","beige","brown","gray","cyan","magenta"])

plt.scatter(x, y, c=colors)

plt.show()

"""##Matplotlib Bars
With Pyplot, you can use the bar() function to draw bar graphs.

The bar() function takes arguments that describes the layout of the bars.

The categories and their values represented by the first and second argument as arrays
"""

import matplotlib.pyplot as plt
import numpy as np

x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])

plt.bar(x,y)
plt.show()

# Draw 4 horizontal bars

import matplotlib.pyplot as plt
import numpy as np

x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])

plt.barh(x, y)
plt.show()

"""## Bar Width
The bar() takes the keyword argument width to set the width of the bars:
"""

import matplotlib.pyplot as plt
import numpy as np

x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])

plt.bar(x, y, width = 0.1)
plt.show()

"""## Bar Height
The barh() takes the keyword argument height to set the height of the bars
"""

import matplotlib.pyplot as plt
import numpy as np

x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])

plt.barh(x, y, height = 0.1)
plt.show()

"""#Matplotlib Histograms

## Histogram
A histogram is a graph showing frequency distributions.

It is a graph showing the number of observations within each given interval.

Example: For simplicity we use NumPy to randomly generate an array with 250 values, where the values will concentrate around 170, and the standard deviation is 10.
"""

import matplotlib.pyplot as plt
import numpy as np

x = np.random.normal(170, 10, 250)

plt.hist(x)
plt.show()

"""#Matplotlib Pie Charts

##Creating Pie Charts
With Pyplot, you can use the pie() function to draw pie charts

##Labels
Add labels to the pie chart with the label parameter.

The label parameter must be an array with one label for each wedge
"""

import matplotlib.pyplot as plt
import numpy as np

y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]

plt.pie(y, labels = mylabels)
plt.show()



import matplotlib.pyplot as plt
import numpy as np

y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]

plt.pie(y, labels = mylabels, startangle = 90)
plt.show()

"""##Explode
Maybe you want one of the wedges to stand out? The explode parameter allows you to do that.

The explode parameter, if specified, and not None, must be an array with one value for each wedge.

Each value represents how far from the center each wedge is displayed
"""

import matplotlib.pyplot as plt
import numpy as np

y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
myexplode = [0.2, 0, 0, 0]

plt.pie(y, labels = mylabels, explode = myexplode)
plt.show()

"""##Legend With Header
To add a header to the legend, add the title parameter to the legend function
"""

import matplotlib.pyplot as plt
import numpy as np

y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]

plt.pie(y, labels = mylabels)
plt.legend(title = "Four Fruits:")
plt.show()

from google.colab import drive
drive.mount('/content/drive')

# Importing pandas as pd
import pandas as pd
# Importing numpy as np
import numpy as np
# Importing matplotlib.pyplot as plt
import matplotlib.pyplot as plt

# Reading csv and storing it in data
data = pd.read_csv("pima-indians-diabetes.csv",sep=",")

# Storing Columns of data
columns = ['pregs','plas','pres','skin','test','BMI','pedi','Age','class']

# Storing each column data in a numpy array
preg = np.array(data[columns[0]])
plas = np.array(data[columns[1]])
pres = np.array(data[columns[2]])
skin = np.array(data[columns[3]])
test = np.array(data[columns[4]])
BMI = np.array(data[columns[5]])
pedi = np.array(data[columns[6]])
Age = np.array(data[columns[7]])

# Function to plot Age with each attribute
def plot(arrX,arrY,str_Y,col):
    plt.scatter(arrX,arrY,label=str_Y,color=col)
    plt.title('Age vs '+str_Y)
    plt.xlabel('Age --->')
    plt.ylabel(str_Y+' --->')
    plt.legend()
    plt.grid()

# Calling plot Function
plot(Age,preg,'preg','blue')
plt.show()

plot(Age,plas,'plas','orange')
plt.show()

plot(Age,pres,'pres','forestgreen')
plt.show()

plt.scatter(Age,preg,label='preg')
plt.scatter(Age,plas,label='plas')
plt.scatter(Age,pres,label='pres')

plt.title('Age vs other attributes')
plt.xlabel('Age --->')
plt.ylabel('Other attributes --->')
plt.legend()
plt.grid()
plt.show()

